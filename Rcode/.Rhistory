quakes[,2]
quakes[1:10,2]
quakes[1,]
quake[,1]
quakes[,1]
quakes[1,]
str(quakes)
qplot(data=quakes, x=long, y=lat)
qplot(data=quakes, x=long, y=lat, size=mag, color=depth, alpha = I(0.7))
qplot(data=quakes, x=stations, y=mag, size = depth, alpha = I(0.25))
qplot(data=quakes, x=stations, y=mag, size = depth, alpha = I(0.25))
qplot(data=quakes, x=long, y=lat, size=mag, color=depth, alpha = I(0.7))
# lets compare the relationship between two other columns
qplot(data=quakes, x=stations, y=mag, size = depth, alpha = I(0.25))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth), alpha= 0.5)
ggplot(data=quakes, aes(x=stations, y=mag, size = depth)) + geom_point(alpha= 0.5)
ggplot() + geom_point(data=quakes, aes(x=stations, y=mag, size = depth), alpha= 0.5)
ggplot(data=quakes) +
geom_bin2d(aes(x=stations, y=mag), binwidth = c(10, 0.25)) +
geom_point(aes(size = depth), color="white",alpha= 0.3) +
ggtitle("Earthquakes")
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25)) +
geom_point(aes(size = depth), color="white",alpha= 0.3) +
ggtitle("Earthquakes")
# multiple geometries
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25)) +
geom_point(aes(size = depth), color="white",alpha= 0.15) +
ggtitle("Earthquakes")
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25)) +
geom_point(aes(size = depth), color="white",alpha= 0.2) +
ggtitle("Earthquakes")
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25), alpha = 0.2) +
geom_point(aes(size = depth)) +
ggtitle("Earthquakes")
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25)) +
geom_point(aes(size = depth), color="white",alpha= 0.2) +
ggtitle("Earthquakes")
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25))
ggplot(data=quakes, aes(x=depth, y=mag) ) +
geom_bin2d(binwidth = c(10, 0.25))
ggplot(data=quakes, aes(x=depth, y=mag) ) +
geom_bin2d(binwidth = c(50, 0.25))
ggplot(data=quakes, aes(x=depth, y=stations) ) +
geom_bin2d(binwidth = c(50, 10))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth), alpha= 0.5)
ggplot(data=quakes, aes(x=stations, y=mag, size = depth)) + geom_point(alpha= 0.5)
ggplot() + geom_point(data=quakes, aes(x=stations, y=mag, size = depth), alpha= 0.5)
qplot(data=quakes, x=long, y=lat)
qplot(data=quakes, x=long, y=lat, size=mag)
qplot(data=quakes, x=long, y=lat, size=mag, color=depth)
?I
qplot(data=quakes, x=long, y=lat, size=mag, color=depth, alpha = I(0.7))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth, alpha = 0.5))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth, alpha = I(0.5)))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth), alpha= 0.5)
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth, alpha = stations))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth, alpha = lat))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, size = depth, alpha = long))
ggplot(data=quakes) + geom_point(aes(x=stations, y=mag, alpha = depth))
# multiple geometries - example of a heatmap
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25)) +
geom_point(aes(size = depth), color="white",alpha= 0.2) +
ggtitle("Earthquakes")
# exploring the relationship between number of quakes, number of stations, magnitude and depth
ggplot(data=quakes, aes(x=stations, y=mag)) +
geom_bin2d(binwidth = c(10, 0.25))
# change the binwidth numbers and see what happens
ggplot(data=quakes, aes(x=depth, y=mag) ) +
geom_bin2d(binwidth = c(50, 0.25))
ggplot(data=quakes, aes(x=depth, y=stations) ) +
geom_bin2d(binwidth = c(50, 10))
earthquakes <- read.csv(file = "data/earthquake.csv")
earthquakes
head(earthquakes)
summary(earthquakes)
str(earthquakes)
library(ggplot2)
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=magType))
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=magType)) +
coord_fixed()
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type)) +
coord_fixed()
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type)) +
coord_fixed()
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed()
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed()
qplot(data=quakes, x=long, y=lat)
qplot(data=quakes, x=long, y=lat, size=mag)
qplot(data=quakes, x=long, y=lat, size=mag, color=depth)
qplot(data=quakes, x=long, y=lat, size=mag, color=depth, alpha = I(0.7))
qplot(data=quakes, x=long, y=lat, size=mag, color=lat<180)
qplot(data=quakes, x=long, y=lat, size=mag, color=lon<180)
qplot(data=quakes, x=long, y=lat, size=mag, color=long<180)
qplot(data=quakes[lon<180,], x=long, y=lat, size=mag)
qplot(data=quakes[quakes$lon<180,], x=long, y=lat, size=mag)
qplot(data=quakes[quakes$lon>180,], x=long, y=lat, size=mag)
qplot(data=quakes, x=long, y=lat, size=mag, color=long<180)
qplot(data=quakes[quakes$lon>180,], x=long, y=lat, size=mag)
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed()
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
theme_bw() +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
theme_light() +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
theme_light() +
scale_color_hue() +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
theme_light() +
scale_color_grey() +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
theme_light() +
scale_color_manual(c("blue","red","orange")) +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
theme_light() +
scale_color_manual(values=c("blue","red","orange")) +
ggtitle("Earthquakes")
ggplot(data = earthquakes) +
geom_point(aes(x=longitude,y=latitude, size=mag, color=type), alpha = 0.6) +
coord_fixed() +
ggtitle("Earthquakes")
ggsave("out/earthquakes.pdf")
?ggsave
library(jsonlite)
fromJSON("data/weather.json")
fromJSON("data/weather.json")
weather <- fromJSON("data/weather.json")
str(weather)
weather <- fromJSON("data/weather.json",flatten = TRUE)
str(weather)
weather <- fromJSON("data/weather.json",flatten = TRUE)
str(weather)
weather <- fromJSON("data/weather.json",flatten = TRUE, simplifyDataFrame = TRUE)
str(weather)
weather <- fromJSON("data/weather.json")
weather$main
weather$ main
weather$list
weather$list
wframe <- weather$list
wframe <- weather$list$main
wmain <- weather$list$main
qplot(wmain$temp)
qplot(wmain$temp, geom="point")
weather <- fromJSON("data/weather.json", flatten = TRUE)
str(weather)
weather$list
wmain <- weather$list
weather <- fromJSON("data/weather.json")
wmain <- weather$list
qplot(data=wmain, x= geom="point")
wmain <- weather$list$dt
wmain
wmain <- weather$list
wmain <- weather$list$main
wmain <- weather$list$main
qplot(data=wmain, x=temp, geom="point")
wmain <- weather$list$weather
weather <- fromJSON("data/weather.json",simplifyDataFrame = TRUE, flatten = TRUE)
wmain <- weather$list
weather <- fromJSON("data/weather.json")
str(weather)
ggplot(data=weather) +
geom_line(aes(x=main$dt, y=main$temp))
wmain <- data.frame(date=weather$list$dt, weather$list$main)
weather <- fromJSON("data/weather.json")
wmain <- data.frame(date=weather$list$dt, weather$list$main)
ggplot(data=wmain) +
geom_line(aes(x=date, y=main$temp))
geom_line(aes(x=date, y=temp))
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp))
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp)) +
geom_line(aes(x=date, y=temp_min)) +
geom_line(aes(x=date, y=temp_max)) +
ggtitle("temperature min max")
weather <- fromJSON("data/weather.json")
wmain <- data.frame(date=weather$list$dt, weather$list$main)
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp)) +
geom_line(aes(x=date, y=temp_min)) +
geom_line(aes(x=date, y=temp_max)) +
ggtitle("temperature min max")
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp/10)) +
geom_line(aes(x=date, y=temp_min/10), ) +
geom_line(aes(x=date, y=temp_max/10)) +
ggtitle("Temperature Min Max in Celsius")
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp/10)) +
geom_line(aes(x=date, y=temp_min/10), color="grey") +
geom_line(aes(x=date, y=temp_max/10), color="grey") +
ggtitle("Temperature Min Max in Celsius")
wmain <- data.frame(date=as.POSIXct(weather$list$dt), weather$list$main)
wmain <- data.frame(date=as.Date(weather$list$dt), weather$list$main)
wmain <- data.frame(date=as.Date(weather$list$dt, origin=1970), weather$list$main)
wmain <- data.frame(date=as.Date(weather$list$dt, origin=1970), weather$list$main)
wmain <- data.frame(date=as.Date(weather$list$dt, origin = "1970-01-01"), weather$list$main)
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp/10)) +
geom_line(aes(x=date, y=temp_min/10), color="grey") +
geom_line(aes(x=date, y=temp_max/10), color="grey") +
ggtitle("Temperature Min Max in Celsius")
wmain <- data.frame(date=weather$list$dt, weather$list$main)
wmain <- data.frame(date=as.POSIXlt(weather$list$dt, origin="1970-1-1"), weather$list$main)
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp/10)) +
geom_line(aes(x=date, y=temp_min/10), color="grey") +
geom_line(aes(x=date, y=temp_max/10), color="grey") +
ggtitle("Temperature Min Max in Celsius")
toJSON(wmain)
weather <- fromJSON("data/weather_simple.json")
str(weather)
summarize(weather)
summary(weather)
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp/10)) +
geom_line(aes(x=date, y=temp_min/10), color="grey") +
geom_line(aes(x=date, y=temp_max/10), color="grey") +
ggtitle("Temperature Min Max in Celsius")
dt <- as.POSIXlt(weather$list$dt, origin="1970-1-1")
weather <- fromJSON("data/weather.json")
dt <- as.POSIXlt(weather$list$dt, origin="1970-1-1")
wmain <- data.frame(dt, weather$list$main)
wmain <- data.frame(date=dt, weather$list$main)
ggplot(data=wmain) +
geom_line(aes(x=date, y=temp/10)) +
geom_line(aes(x=date, y=temp_min/10), color="grey") +
geom_line(aes(x=date, y=temp_max/10), color="grey") +
ggtitle("Temperature Min Max in Celsius")
# again, save
ggsave("out/weather.pdf")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("pairsD3")
install.packages("GGally")
install.packages("tabplot")
install.packages("corrgram")
install.packages("choroplethr")
install.packages("maptools")
install.packages("rgdal")
install.packages("gridExtra")
install.packages("colorspace")
install.packages("RColorBrewer")
install.packages("igraph")   #install and load igrph library
install.packages("colorspace")
lesmis <- read.delim("data/lesmis.txt", header = FALSE)
mis <- graph.data.frame(lesmis)   # parse the dataframe into the igraph object mis
plot(mis)                         # render the igraph object
library(igraph)
mis <- graph.data.frame(lesmis)   # parse the dataframe into the igraph object mis
plot(mis)                         # render the igraph object
mis <- graph.data.frame(lesmis, directed = FALSE)
# basic functions
vcount(mis)           # list table of vertices (nodes)
ecount(mis)           # list table of edges
degree(mis)           # list table of degree values
betweenness(mis)      # list table of betweenness values
closeness(mis)        # list table of closeness values
V(mis)                # get vector with all vertices (nodes)
E(mis)                # get vector with all edges
# create a color palette with 10 steps
library(colorspace)
pal <- choose_palette()
ncol <- 25           # we will use 25 color steps
palette(pal(ncol))
#attach centralities as attributes to data the graph, normalized to 0-1
V(mis)$degree       <-  degree(mis, normalized = TRUE)
V(mis)$betweenness  <-  betweenness(mis, normalized = TRUE)
V(mis)$closeness    <-  closeness(mis, normalized = TRUE)
# set default options for layout
# for other igraph options check http://igraph.org/r/doc/plot.common.html
vertex.label = NA,           # dont show labels by default
vertex.frame.color = NA,     # the border color of the node
# set node size to degree
V(mis)$color <- V(mis)$betweenness * ncol  # assign color to betweenness, scaled to number of colors
plot(mis)
igraph.options(layout=layout.kamada.kawai,
vertex.size = 15,            # default node size
V(mis)$size  <- V(mis)$degree * 25   # assign size to closeness, adjust value for good size
# for other layout options check http://igraph.org/r/doc/layout.html
vertex.color = "lightblue")  # default node color
V(mis)$color <- V(mis)$closeness   * ncol  # assign color to closeness, scaled to number of colors
(networkD3)
install.packages("networkD3")
library(networkD3)
# for the d3 network we need the original data frame with the edge list
lesmis <- read.delim("data/lesmis.txt", header = FALSE)
n <- simpleNetwork(lesmis)
n
saveNetwork(n, file = "lesmis.html") #save our javascript network to a html file
install.packages("RColorBrewer")
# start
colors()                  # list all color names in R
palette()                 # standard color palette
rgb(1.0, 1.0, 0.0)        # color from rgb value
col2rgb("magenta")        # rgb value from color
source("http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.R")  # generate color chart pdf
t <- Titanic[,2,2,2]      # take a slice from the built in Titanic data set (female adult survivors)
#create & use palettes
pie(t)                    # render as pie chart
pairs(iris)
install.packages("pairsD3")
require(pairsD3)
pd3 <- pairsD3(iris[,1:4],group=iris[,5])
savePairs(pd3, file = 'iris.html')
shinypairs(iris)
install.packages("tabplot")
library(tabplot)
tableplot(iris)
tableplot(iris,sortCol = "Species")
install.packages("corrgram")
library(corrgram)
corrgram(iris)
qplot(data=economics, x=date,y=unemploy/pop, geom="line", ylab="Unemployment rate")
str(economics)
ggplot(data=economics,aes(x=date,y=unemply/pop)) + geom_line()
ggplot(data=economics,aes(x=date,y=unemploy/pop)) + geom_line()
ggplot(data=economics,aes(x=date,y=unemploy/pop)) + geom_line() + geom_point()
ggplot(data=economics,aes(x=date,y=unemploy/pop, color="red")) + geom_line() + geom_point()
ggplot(data=economics,aes(x=date,y=unemploy/pop, color=red)) + geom_line() + geom_point()
red
ggplot(data=economics,aes(x=date,y=unemploy/pop, color="red")) + geom_line() + geom_point()
qplot(x=rivers, geom="histogram", xlab="River lengths (miles)")
hist(rivers, breaks=50, xlab="River length (miles)")
qplot(x=rivers, geom="histogram", xlab="River lengths (miles)")
ggplot(data=riv,aes(x=length)) + geom_histogram() + xlab("River lengths (miles)")
ggplot(data=rivers,aes(x=length)) + geom_histogram() + xlab("River lengths (miles)")
rivers
riv <- data.frame(length=rivers)
ggplot(data=riv,aes(x=length)) + geom_histogram() + xlab("River lengths (miles)")
qplot(x=rivers, geom="histogram", binwidth = 30, xlab="River lengths (miles)")
qplot(x=rivers, geom="histogram", binwidth = 15, xlab="River lengths (miles)")
qplot(x=rivers, geom="histogram", binwidth = range/24, xlab="River lengths (miles)")
qplot(x=rivers, geom="histogram", binwidth = range(rivers)/24, xlab="River lengths (miles)")
hist(rivers, breaks=50
)
qplot(x=rivers, geom="histogram", breaks = 30, xlab="River lengths (miles)")
qplot(x=rivers, geom="histogram", xlab="River lengths (miles)")
??bindwidth
install.packages("Rcmdr")
library(Rcmdr)
library(Rattle)
install.packages("Rattle")
install.packages("rattle")
V(mis)$size  <- V(mis)$degree * 25   # assign size to closeness, adjust value for good size
d <- "2:29:00 AM"
as.POSIXct(d)
as.POSIXlt(d)
strptime("2:29:00 AM", "%T")
strptime("2:29:00 AM", "%T %l")
strptime("2:29:00 AM", "%l")
strptime("2:29:00 PM", "%l")
strptime("2:29:00 PM", "%l %P")
strptime("2:29:00 PM", "%T %P")
strptime("2:29:00 PM", "%T%P")
strptime("2:29:00 PM", "%I %P")
strptime("2:29:00 PM", "%P")
strptime("2:29:00 PM", "%I:%M:%S %P")
strptime("2:29:00 PM", "%I:%M:%S%P")
strptime("2:29:00 PM", "%r")
strptime("2:29:00 AM", "%r")
as.POSIXct(d,format="%r")
as.POSIXct("2:29:00 AM",format="%r")
strptime("2:29:00 PM", "%r")
as.POSIXct(strptime("2:29:00 PM", "%r"))
?levels
?levels
library(leaflet)
boswgs84 <- readOGR(dsn="data/bos_tracts/", layer="bos_tracts")
cclatlon <- read.csv(file="data/citizensconnect_latlon.csv")
pal <- colorNumeric( palette = "Blues", domain = boswgs84@data$POP100_RE)
map <- leaflet()
map %>%
install.packages("leaflet")
install.packages("leaflet")
install.packages("choroplethr")
install.packages("choroplethrMaps")
install.packages("maptools")
install.packages("rgeos")
install.packages("rgdal")
install.packages("mapdata")
install.packages("gridExtra")
install.packages("leaflet")
install.packages("choroplethr")
install.packages("choroplethrMaps")
install.packages("maptools")
install.packages("rgeos")
install.packages("mapdata")
install.packages("gridExtra")
install.packages("leaflet")
library(leaflet)
boswgs84 <- readOGR(dsn="data/bos_tracts/", layer="bos_tracts")
library(maps)
library(mapdata)
library(gridExtra)
library(rgeos)
library(ggplot2)
library(sp)
library(maptools)
library(rgdal)
library(ggplot2)
library(leaflet)
boswgs84 <- readOGR(dsn="data/bos_tracts/", layer="bos_tracts")
cclatlon <- read.csv(file="data/citizensconnect_latlon.csv")
pal <- colorNumeric( palette = "Blues", domain = boswgs84@data$POP100_RE)
map <- leaflet()
map %>%
addPolygons(data=boswgs84, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~pal(boswgs84@data$POP100_RE), opacity=0.5) %>%
addCircleMarkers(~lon,~lat,radius = 2, weight = 4, popup=~service_name,  color='yellow', data=cclatlon)
library(mallet)
install.packages("mallet")
library(mallet)
cc <- read.csv("data/complaints.csv")
# initiate topic model trainer, with n topics (this value can be tweaked based on result)
n <- 25
topic.model <- MalletLDA(num.topics=n)
## Load document corpus. We could also pass in the filename of a saved instance list file that we build from the command-line tools.
mallet.instances <- mallet.import(id.array = row.names(cc), text.array = as.character(cc$description), stoplist.file = "data/stop_311.txt", token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
topic.model$loadDocuments(mallet.instances)
## Get the vocabulary, and some statistics about word frequencies.
##  These may be useful in further curating the stopword list.
vocabulary <- topic.model$getVocabulary()
word.freqs <- mallet.word.freqs(topic.model)
word.freqs$term.freq.n <- word.freqs$term.freq/sum(word.freqs$term.freq)
word.freqs$doc.freq.n <- word.freqs$doc.freq/sum(word.freqs$doc.freq)
# now train the topic models with 200 iterations
topic.model$train(500)
## run through a few iterations where we pick the best topic for each token
topic.model$maximize(10)
## Get the probability of topics in documents and the probability of words in topics.
## By default, these functions return raw word counts. Here we want probabilities,
## so we normalize, and add "smoothing" so that nothing has exactly 0 probability.
doc.topics <- mallet.doc.topics(topic.model, smoothed=T, normalized=T)
## create a top word list
for (i in 1:nrow(topic.words)) {
tmp$topic <- i
}
#visualize word clouds
library(wordcloud)
top.words <- data.frame()
rm(i);rm(tmp)
topic.words <- mallet.topic.words(topic.model, smoothed=T, normalized=T)
top.words <- rbind( top.words, tmp)
tmp <- mallet.top.words(topic.model, topic.words[i,], num.top.words = 10)
#install.packages("wordcloud")
topic.model$maximize(10)
## Get the probability of topics in documents and the probability of words in topics.
## By default, these functions return raw word counts. Here we want probabilities,
## so we normalize, and add "smoothing" so that nothing has exactly 0 probability.
doc.topics <- mallet.doc.topics(topic.model, smoothed=T, normalized=T)
topic.words <- mallet.topic.words(topic.model, smoothed=T, normalized=T)
## create a top word list
top.words <- data.frame()
for (i in 1:nrow(topic.words)) {
tmp <- mallet.top.words(topic.model, topic.words[i,], num.top.words = 10)
tmp$topic <- i
top.words <- rbind( top.words, tmp)
}
rm(i);rm(tmp)
#visualize word clouds
#install.packages("wordcloud")
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
pal <- brewer.pal(4,"Paired")
# plot each recognized topic as a wordcloud
# use back buttons to browse (or uncomment save command to save as pdf)
for (i in 1: n) {
tmp <- top.words[top.words$topic==i,]
wordcloud(tmp$words,freq = tmp$weights,random.order=FALSE, rot.per = 0,colors=pal, scale = c(3,1))
text(x=0.5, y=0.1, paste("Topic",i))
#quartz.save(paste("out/",i,".pdf", sep = ""), type = "pdf")#, width = 5, height = 4)
}
