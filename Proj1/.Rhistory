b<-c()
m<-c()
n<-c()
a[1]<-true_rare(test1,ypred_svm1)
b[1]<-true_zero(test1,ypred_svm1)
m[1]<-true_rare(test2,ypred_svm2)
n[1]<-true_zero(test2,ypred_svm2)
a[2]<-true_rare(test1,ypred_knn1)
b[2]<-true_zero(test1,ypred_knn1)
m[2]<-true_rare(test2,ypred_knn2)
n[2]<-true_zero(test2,ypred_knn2)
a[3]<-true_rare(test1,ypred_nnet1)
b[3]<-true_zero(test1,ypred_nnet1)
m[3]<-true_rare(test2,ypred_nnet2)
n[3]<-true_zero(test2,ypred_nnet2)
a[4]<-true_rare(test1,ypred_dt1)
b[4]<-true_zero(test1,ypred_dt1)
m[4]<-true_rare(test2,ypred_dt2)
n[4]<-true_zero(test2,ypred_dt2)
a[5]<-true_rare(test1,ypred_rf1)
b[5]<-true_zero(test1,ypred_rf1)
m[5]<-true_rare(test2,ypred_rf2)
n[5]<-true_zero(test2,ypred_rf2)
a[6]<-true_rare(test1,ypred_naivbs1)
b[6]<-true_zero(test1,ypred_naivbs1)
m[6]<-true_rare(test2,ypred_naivbs2)
n[6]<-true_zero(test2,ypred_naivbs2)
a[7]true_rare(test1,ypred_bg1)
b[7]<-true_zero(test1,ypred_bg1)
m[7]<-true_rare(test2,ypred_bg2)
n[7]<-true_zero(test2,ypred_bg2)
barplot(a)
barplot(b)
barplot(n)
a[3]<-true_rare(test1,ypred_nnet1)
b[3]<-true_zero(test1,ypred_nnet1)
m[3]<-true_rare(test2,ypred_nnet2)
n[3]<-true_zero(test2,ypred_nnet2)
barplot(a)
barplot(b)
barplot(m)
barplot(n)
true_rare(test1,ypred_dt1)
true_rare(test1,ypred_nnet1)
true_zero(test1,ypred_nnet1)
true_rare(test2,ypred_nnet2)
ideal1<-as.data.frame(model.matrix(~0+train1[,24]))  #or ideal <- class.ind(train[,24])
ideal1<-as.data.frame(model.matrix(~0+train1[,24]))  #or ideal <- class.ind(train[,24])
seedsANN = nnet(train1[,-24],ideal1, size=20, softmax=TRUE,maxit = 200)
predict(seedsANN, test1[,-24],type="class")
head(train1)
summary(train1)
library(stringr)
as.numeric(str_extract(ypred_nnet1,"[0-9][0-9]*$"))
ypred_nnet1<-as.numeric(str_extract(ypred_nnet1,"[0-9][0-9]*$"))
as.numeric(str_extract(ypred_nnet2,"[0-9][0-9]*$"))
ypred_nnet2<-as.numeric(str_extract(ypred_nnet2,"[0-9][0-9]*$"))
a[3]<-true_rare(test1,ypred_nnet1)
true_rare(test1,ypred_nnet1)
true_zero(test1,ypred_nnet1)
true_rare(test2,ypred_nnet2)
true_zero(test2,ypred_nnet2)
a[3]<-true_rare(test1,ypred_nnet1)
b[3]<-true_zero(test1,ypred_nnet1)
m[3]<-true_rare(test2,ypred_nnet2)
n[3]<-true_zero(test2,ypred_nnet2)
barplot(a)
barplot(b)
barplot(m)
barplot(n)
barplot(a) #true_rare method I
barplot(b) #true_zero method I
barplot(m) #true_rare method II
barplot(n) #true_zero method II
barplot(a) #true_rare method I
barplot(m) #true_rare method II
barplot(b) #true_zero method I
barplot(b) #true_zero method I
barplot(a) #true_rare method I
barplot(m) #true_rare method II
barplot(a) #true_rare method I
barplot(b) #true_zero method I
barplot(n) #true_zero method II
barplot(b) #true_zero method I
barplot(a) #true_rare method I
barplot(m) #true_rare method II
barplot(a) #true_rare method I
barplot(b) #true_zero method I
barplot(a) #true_rare method I
barplot(b) #true_zero method I
barplot(a) #true_rare method I
barplot(a, names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method I
svm,knn,neural,decisiontree,randomf,naive,bagg,boost,
barplot(a, names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method I
barplot(a, names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method I
barplot(b, names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method I
barplot(b, names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method I
b
a
rm(b)
rm(c)
rm(m)
rm(n)
a[1]<-true_rare(test1,ypred_svm1)
b[1]<-true_zero(test1,ypred_svm1)
m[1]<-true_rare(test2,ypred_svm2)
n[1]<-true_zero(test2,ypred_svm2)
a[2]<-true_rare(test1,ypred_knn1)
b[2]<-true_zero(test1,ypred_knn1)
m[2]<-true_rare(test2,ypred_knn2)
n[2]<-true_zero(test2,ypred_knn2)
a<-c()
b<-c()
m<-c()
n<-c()
a[1]<-true_rare(test1,ypred_svm1)
b[1]<-true_zero(test1,ypred_svm1)
m[1]<-true_rare(test2,ypred_svm2)
n[1]<-true_zero(test2,ypred_svm2)
a[2]<-true_rare(test1,ypred_knn1)
b[2]<-true_zero(test1,ypred_knn1)
m[2]<-true_rare(test2,ypred_knn2)
n[2]<-true_zero(test2,ypred_knn2)
a[3]<-true_rare(test1,ypred_nnet1)
b[3]<-true_zero(test1,ypred_nnet1)
m[3]<-true_rare(test2,ypred_nnet2)
n[3]<-true_zero(test2,ypred_nnet2)
a[4]<-true_rare(test1,ypred_dt1)
b[4]<-true_zero(test1,ypred_dt1)
m[4]<-true_rare(test2,ypred_dt2)
n[4]<-true_zero(test2,ypred_dt2)
a[5]<-true_rare(test1,ypred_rf1)
b[5]<-true_zero(test1,ypred_rf1)
m[5]<-true_rare(test2,ypred_rf2)
n[5]<-true_zero(test2,ypred_rf2)
a[6]<-true_rare(test1,ypred_naivbs1)
b[6]<-true_zero(test1,ypred_naivbs1)
m[6]<-true_rare(test2,ypred_naivbs2)
n[6]<-true_zero(test2,ypred_naivbs2)
a[7]<-true_rare(test1,ypred_bg1)
b[7]<-true_zero(test1,ypred_bg1)
m[7]<-true_rare(test2,ypred_bg2)
n[7]<-true_zero(test2,ypred_bg2)
a[8]<-true_rare(test1,ypred_boost1)
b[8]<-true_zero(test1,ypred_boost1)
m[8]<-true_rare(test2,ypred_boost2)
n[8]<-true_zero(test2,ypred_boost2)
rm(a[7])
a
barplot(a[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method I
barplot(b[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method I
barplot(m[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method II
barplot(a[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method I
barplot(b[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method I
barplot(m[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method II
barplot(m) #true_rare method II
barplot(n) #true_zero method II
barplot(b[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method I
barplot(m[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_rare method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "Artificial Neural Network","Decision Tree","Random Forest","Naive Base")) #true_zero method II
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","Decision Tree","Random Forest","Naive Base")) #true_rare method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","Random Forest","Naive Base")) #true_rare method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","Naive Base")) #true_rare method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_rare method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_rare method I
barplot(b[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_zero method I
barplot(m[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_rare method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_zero method II
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_rare method I
barplot(b[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_zero method I
barplot(m[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_rare method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB")) #true_zero method II
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"")) #true_rare method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue")) #true_rare method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue")) #true_rare method I
barplot(n[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("purpule")) #true_zero method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("purpul")) #true_zero method II
barplot(n[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("orange")) #true_zero method II
barplot(m[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("red")) #true_rare method II
barplot(b[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("green")) #true_zero method I
barplot(a[1:6], names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue")) #true_rare method I
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue")) #true_rare method I
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage") #true_rare method I
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="a") #true_rare method I
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activity using original training set (Method I) ") #true_rare method I
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activity using Original Training Set (Method I) ") #true_rare method I
barplot(n[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("orange"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method II) ") #true_zero method II
barplot(m[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("red"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activity using Modified Training Set (Method II) ") #true_rare method II
barplot(n[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("orange"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Modified Training Set (Method II) ") #true_zero method II
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activities using Original Training Set (Method I) ",ylim=[0:100])
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activities using Original Training Set (Method I) ",ylim=c(0:100))
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activities using Original Training Set (Method I) ",ylim=c(0,100))
barplot(b[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("green"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I) ",ylim=c(0,100)) #true_zero method I
barplot(m[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("red"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activity using Modified Training Set (Method II) ",ylim=c(0,100)) #true_rare method II
barplot(n[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("orange"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Modified Training Set (Method II) ",ylim=c(0,100)) #true_zero method II
barplot(m) #true_rare method II
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activities using Original Training Set (Method I) ",ylim=c(0,100))
barplot(b[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("green"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I) ",ylim=c(0,100)) #true_zero method I
barplot(m[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("red"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activity using Modified Training Set (Method II) ",ylim=c(0,100)) #true_rare method II
barplot(n[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("orange"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Modified Training Set (Method II) ",ylim=c(0,100)) #true_zero method II
barplot(n[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("orange"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Modified Training Set (Method II) ",ylim=c(0,100)) #true_zero method II
barplot(m[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("red"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activity using Modified Training Set (Method II) ",ylim=c(0,100)) #true_rare method II
true_all<-function(test,ypred)
{
a<-sum(ypred==test$Y)/length(test$Y)
return(a)
}
x[1]<-true_all(test2,ypred_svm2)
x[6]<-true_all(test2,ypred_naivbs2)
e[6]<-true_all(test1,ypred_naivbs1)
a<-c()
b<-c()
e<-c()
m<-c()
n<-c()
x<-c()
a[1]<-true_rare(test1,ypred_svm1)
b[1]<-true_zero(test1,ypred_svm1)
e[1]<-true_all(test1,ypred_svm1)
m[1]<-true_rare(test2,ypred_svm2)
n[1]<-true_zero(test2,ypred_svm2)
x[1]<-true_all(test2,ypred_svm2)
e
x
x[3]<-true_all(test2,ypred_knn2)
n[4]<-true_zero(test2,ypred_dt2)
x[4]<-true_all(test2,ypred_dt2)
e[4]<-true_all(test1,ypred_dt1)
m[4]<-true_rare(test2,ypred_dt2)
n[4]<-true_zero(test2,ypred_dt2)
x[4]<-true_all(test2,ypred_dt2)
e[5]<-true_all(test2,ypred_rf2)
e[5]<-true_all(test1,ypred_rf1)
m[5]<-true_rare(test2,ypred_rf2)
n[5]<-true_zero(test2,ypred_rf2)
x[5]<-true_all(test2,ypred_rf2)
e[5]<-true_all(test1,ypred_rf1)
m[5]<-true_rare(test2,ypred_rf2)
n[5]<-true_zero(test2,ypred_rf2)
x[5]<-true_all(test2,ypred_rf2)
a[5]<-true_rare(test1,ypred_rf1)
b[5]<-true_zero(test1,ypred_rf1)
e[5]<-true_all(test1,ypred_rf1)
m[5]<-true_rare(test2,ypred_rf2)
n[5]<-true_zero(test2,ypred_rf2)
x[5]<-true_all(test2,ypred_rf2)
a[1]<-true_rare(test1,ypred_svm1)
b[1]<-true_zero(test1,ypred_svm1)
e[1]<-true_all(test1,ypred_svm1)
m[1]<-true_rare(test2,ypred_svm2)
n[1]<-true_zero(test2,ypred_svm2)
x[1]<-true_all(test2,ypred_svm2)
a[2]<-true_rare(test1,ypred_knn1)
b[2]<-true_zero(test1,ypred_knn1)
e[2]<-true_all(test1,ypred_knn1)
m[2]<-true_rare(test2,ypred_knn2)
n[2]<-true_zero(test2,ypred_knn2)
x[2]<-true_all(test2,ypred_knn2)
a[3]<-true_rare(test1,ypred_nnet1)
b[3]<-true_zero(test1,ypred_nnet1)
e[3]<-true_all(test1,ypred_nnet1)
m[3]<-true_rare(test2,ypred_nnet2)
n[3]<-true_zero(test2,ypred_nnet2)
x[3]<-true_all(test2,ypred_knn2)
a[4]<-true_rare(test1,ypred_dt1)
b[4]<-true_zero(test1,ypred_dt1)
e[4]<-true_all(test1,ypred_dt1)
m[4]<-true_rare(test2,ypred_dt2)
n[4]<-true_zero(test2,ypred_dt2)
x[4]<-true_all(test2,ypred_dt2)
a[5]<-true_rare(test1,ypred_rf1)
b[5]<-true_zero(test1,ypred_rf1)
e[5]<-true_all(test1,ypred_rf1)
m[5]<-true_rare(test2,ypred_rf2)
n[5]<-true_zero(test2,ypred_rf2)
x[5]<-true_all(test2,ypred_rf2)
a[6]<-true_rare(test1,ypred_naivbs1)
b[6]<-true_zero(test1,ypred_naivbs1)
e[6]<-true_all(test1,ypred_naivbs1)
m[6]<-true_rare(test2,ypred_naivbs2)
n[6]<-true_zero(test2,ypred_naivbs2)
x[6]<-true_all(test2,ypred_naivbs2)
mtd1<-cbind(a,b,e)
mtd2<-cbind(m,n,x)
mtd1<-cbind(a[1:6],b[1:6],e[1:6])
mtd2<-cbind(m[1:6],n[1:6],x[1:6])
barplot(mtd1)
barplot(t(mtd1))
barplot(t(mtd1))
barplot(t(mtd1),beside=T)
barplot(t(mtd1),beside=T,ylab="number of species",xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I) ",ylim=c(0,100),cex.names=0.8, las=2,col=c("red","green","blue"))
barplot(t(mtd1),beside=T,ylab="number of species",xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I) ",ylim=c(0,100),cex.names=0.8, las=2,col=c("red","green","blue"))
barplot(t(mtd1),beside=T,ylab="number of species",xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=0.8, las=2,col=c("red","green","blue"))
barplot(t(mtd1),beside=T,ylab="number of species",xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=0.8, las=2,col=c("red","green","blue"))
barplot(t(mtd1),beside=T,xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=0.8, las=2,col=c("red","green","blue"))
barplot(t(mtd1)*100,beside=T,xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=0.8, las=2,col=c("red","green","blue"))
barplot(t(mtd1)*100,beside=T,xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=0.2, las=2,col=c("red","green","blue"))
barplot(t(mtd1)*100,beside=T,xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","blue"))
barplot(t(mtd1)*100,beside=T,xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of 'Standing Still' using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"))
barplot(a[1:6]*100, names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),col=c("blue"),xlab="Classification Method",ylab="Accuracy Percentage",main="Prediction of Rare Activities using Original Training Set (Method I) ",ylim=c(0,100))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"))
mtd1<-cbind(a[1:6],b[1:6],e[1:6])
mtd2<-cbind(m[1:6],n[1:6],x[1:6])
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 12, y=2000, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 12, y=2000, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 1, y=2000, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 1, y=50, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 100, y=50, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 4, y=50, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 40, y=50, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 20, y=50, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 20, y=80, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 20, y=100, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=100, bty = "n"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=100, bty = "n"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=110, bty = "n"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=105, bty = "n"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
barplot(t(mtd1)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=100, bty = "n"))
barplot(t(mtd2)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
fe-AT<-c(0.92,0.84)
fe_AT<-c(0.92,0.84)
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
fe_AT<-c(0.92,0.84,0)
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
cbind(t(mtd2),fe_AT
cbind(t(mtd2),fe_AT)*100
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
mtd2
t(mtd2)
cbind(t(mtd2),fe_AT)
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
fe_AT<-c(0.92,0.84)
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
fe_AT<-c(0.92,0.84,0)
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=100, bty = "n"))
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=105, bty = "n"))
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=105, bty = "n"))
barplot(cbind(t(mtd1),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=105, bty = "n"))
barplot(cbind(t(mtd1),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Original Training Set (Method I)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"), args.legend =list(x = 18, y=105, bty = "n"))
barplot(cbind(t(mtd2),fe_AT)*100,beside=T,names.arg=c("SVM", "KNN", "ANN","DT","RF","NB","FE_AT"),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Modified Training Set (Method II)",ylim=c(0,100),cex.names=1, las=2,col=c("red","green","darkblue"),legend = c("Prediction of Rare Activities","Prediction of 'Standing Still'","Predication of All"),args.legend =list(x = 18, y=103, bty = "n"))
a=c()
for (i in 1:(ncol(dt)-1))
{
a[i]<-sum(dt$Y==i)/nrow(dt)
}
# a is the frequency vector of each label from a[1] to a[12]
b<-sum(dt$Y==0)/nrow(dt)
#b is the frequency of label 0
plot(a)
cc<-c(b,a)
#cc is a frequency label of all Y classes  cc[1]..cc[13]
barplot(cc)
plot(cc,ylab="p",xlab="activities label",main="Activities Frequency in the training dataset")
barplot(cc,names.arg=c(1:24),xlab="Classification Method",ylab="Accuracy Percentage",main="Classifications Accuracy using Modified Training Set (Method II)",ylim=c(0,1),cex.names=1, las=2,col=c("green"))
barplot(cc,names.arg=c(1:24),xlab="Activity Type",ylab="Probability",main="",ylim=c(0,1),col=c("green"))
barplot(cc,names.arg=c(1:24),xlab="Activity Type",ylab="Probability",main="",ylim=c(0,1),col=c("green"))
barplot(cc,names.arg=c(1:24),xlab="Activity Type",ylab="Probability",main="",ylim=c(0,1),col=c("green"))
#cc is a frequency label of all Y classes  cc[1]..cc[13]
barplot(cc,names.arg=c(1:24),xlab="Activity Type",ylab="Probability",main="Probability Distribution of the Activities in the Original Dataset",ylim=c(0,1),col=c("green"))
barplot(cc,names.arg=c(1:24),xlab="Activity Type",ylab="Probability",main="Probability Distribution of the Activities in the Original Dataset",ylim=c(0,1),col=c("green"))
barplot(a)
barplot(b)
barplot(m)
barplot(n)
plot(h,cost)
lines(h,cost)
h<-c()
cost<-c()
ntr<-30000 #training
nte<-1000 #test
for (j in c(1:100))
{
print(j)
h[j]<-0+j*0.01
r<-h[j]
train_t<-rbind(dt_rare[1:(r*ntr),],dt_zero[1:((1-r)*ntr),])
test_t<-rbind(dt_rare[(r*ntr+1):(r*ntr+0.9*nte),],dt_zero[((1-r)*ntr+1):((1-r)*ntr+0.1*nte),])
#svm.fit<- svm(Y~.,data=train_t, kernal="polynomial",cost=100,scale=TRUE)
#ypred_svm=predict(svm.fit,test_t)
ypred_knn<-knn(train_t[,-24], test_t[,-24], train_t[,24], k = 13, prob=FALSE)
cost[j]<-(0.2*(1-true_rare(test_t,ypred_knn))+0.8*(1-true_zero(test_t,ypred_knn)))
print(cost[j])
}
plot(h,cost)
lines(h,cost)
result
lines(h,cost,col="red")
help(lines)
lines(h,cost,col="red",type="2")
lines(h,cost,col="red",type="10")
lines(h,cost,col="red",type="1")
result
help(lines)
lines(h,cost,col="red")
plot(h,cost,col="blue")
lines(h,cost,col="red")
lines(h,cost,col="red",lwd=10)
cat("\014")    #This clears the Consol
rm(list=ls())    #This removes all the variables previously existed in Global Environment.
require(RCurl)    #Downloading Package
require(XML)
library(RCurl)     #Using package in this program
library(XML)
#Set the working directory to your workspace
setwd("/Users/mohsennabian/Dropbox/Spring 2106/Visualization/Proj1")
theurl<-"file:///Users/mohsennabian/Dropbox/Spring%202106/Visualization/Proj1/search-history.html"
webpage <- getURL(theurl)
# convert the page into a line-by-line format rather than a single string
tc <- textConnection(webpage)
webpage <- readLines(tc) #webpage is now a vector of string each elament is a line of string
close(tc)
pagetree <- htmlTreeParse(webpage, useInternalNodes = TRUE)  #pagetree is now in html format and parseable with xpath syntax.
searches<- unlist(xpathApply(pagetree,"//*/td",xmlValue))
searches<-searches[str_detect(searches, "201")]
searches<-searches[str_detect(searches, "T")]
searches<-searches[str_detect(searches, "Z")]
searches
cat("\014")    #This clears the Consol
rm(list=ls())    #This removes all the variables previously existed in Global Environment.
require(RCurl)    #Downloading Package
require(XML)
library(RCurl)     #Using package in this program
library(XML)
require(stringr)
library(stringr)
library(tm)
library(RTextTools)
library(wordcloud)
#Set the working directory to your workspace
setwd("/Users/mohsennabian/Dropbox/Spring 2106/Visualization/Proj1")
theurl<-"file:///Users/mohsennabian/Dropbox/Spring%202106/Visualization/Proj1/2015.txt"
#Set the working directory to your workspace
setwd("/Users/mohsennabian/Dropbox/Spring 2106/Visualization/Proj1")
theurl<-"file:///Users/mohsennabian/Dropbox/Spring%202106/Visualization/Proj1/2015.txt"
webpage <- getURL(theurl)
# convert the page into a line-by-line format rather than a single string
tc <- textConnection(webpage)
webpage <- readLines(tc) #webpage is now a vector of string each elament is a line of string
close(tc)
pagetree <- htmlTreeParse(webpage, useInternalNodes = TRUE)  #pagetree is now in html format and parseable with xpath syntax.
searches<- unlist(xpathApply(pagetree,"//*/a[@*]",xmlValue))
str_detect(searches, "Ù")
searches<-searches[!(str_detect(searches, "Ù"))]
searches
#Set the working directory to your workspace
setwd("/Users/mohsennabian/Dropbox/Spring 2106/Visualization/Proj1")
theurl<-"file:///Users/mohsennabian/Dropbox/Spring%202106/Visualization/Proj1/search-history.html"
webpage <- getURL(theurl)
# convert the page into a line-by-line format rather than a single string
tc <- textConnection(webpage)
webpage <- readLines(tc) #webpage is now a vector of string each elament is a line of string
close(tc)
pagetree <- htmlTreeParse(webpage, useInternalNodes = TRUE)  #pagetree is now in html format and parseable with xpath syntax.
searches<- unlist(xpathApply(pagetree,"//*/td",xmlValue))
searches<-searches[str_detect(searches, "201")]
searches<-searches[str_detect(searches, "T")]
searches<-searches[str_detect(searches, "Z")]
searches
library(lubridate)
y<-c()
m<-c()
d<-c()
hours<-c()
for (i in c(1:length(searches)))
{
tm<-ymd_hms(searches[i])
y[i]<-year(tm)
m[i]<-month(tm)
d[i]<-day(tm)
hours[i]<-hour(tm)
}
hours<-hours-5
hours<-hours%%24
df<-data.frame(hours,y,m,d)
df2<-df[!(df[,2]==2012),]   #Removing 2012 uses
df3<-df2[!(df2[,2]==2016),]  #Removing 2016 and 2012
library(ggplot2)
g10<-ggplot(data=df3,aes(x = hours, group = as.factor(y)))+geom_density(aes(fill =as.factor(y), color =as.factor(y)), alpha = 0.5)
g10<-g10+xlab("Hours")+ylab("Youtube Visit Density")
g10<-g10+theme(axis.text=element_text(size=15),axis.title=element_text(size=20,face="bold"))
g10<-g10+guides(fill=FALSE)
g10<-g10+guides(fill=guide_legend(title="Year"))
g10
df2$m<-as.factor(df2$m)
df2$m<-factor(df2$m, levels = rev(levels(df2$m)))
#########################   Month
g2<-ggplot(data=df2, aes(df2$m,fill=as.factor(df2$y)))+geom_bar()+coord_flip()
g2<-g2+scale_x_discrete(breaks=c("1","2","3","4","5","6","7","8","9","10","11","12"),labels=c("Januray","Febreury", "March","April","May","June","July","August","September","October","November","December"))
g2<-g2+xlab("Month")+ylab("Youtube Visit")+theme(axis.text=element_text(size=15),axis.title=element_text(size=20,face="bold"))
g2<-g2+guides(fill=guide_legend(title="Year"))
g2
#######################
bp<- ggplot(df2, aes(x="", y=y, fill=y))
bp
bp+geom_bar(width = 1, stat = "identity")
pie<-pie + coord_polar("y", start=0)
pie<-bp + coord_polar("y", start=0)
pie
bp<-bp+geom_bar(width = 1, stat = "identity")
pie<-bp + coord_polar("y", start=0)
pie
